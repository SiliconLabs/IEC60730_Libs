{#-
  Device specific sizes and addresses. These variables describes the physical
  memory of the device.
#}
{%- set series = device_series | first %}
{%- set sram_addr = device_ram_addr | first | default(536870912, true) %}
{%- set sram_size = device_ram_size | first %}
{%- set flash_addr = device_flash_addr | first | default(0, true) %}
{%- set flash_size = device_flash_size | first %}
{%- set flash_page_size = device_flash_page_size | first %}

{%- if bootloader_enable %}
{%-   if memory_flash_start is defined %}
{%-     set bootloader_flash_startaddr = memory_flash_start | sum %}
{%-   else %}
{%-     set bootloader_flash_startaddr = bootloader_flash_addr | sum %}
{%-   endif %}
{%-   if memory_flash_size is defined %}
{%-     set bootloader_flash_size = memory_flash_size | sum %}
{%-   else %}
{%-     set bootloader_flash_size = bootloader_main_size | sum %}
{%-   endif %}
{%- endif %}

{#-
  Application specific sizes. Here we start to calculate the application view
  of the physical memory.
#}
{%- if memory_ram_start is defined %}
{%-   set app_ram_start = memory_ram_start | first %}
{%- else %}
{%-   set app_ram_start = sram_addr %}
{%- endif %}

{%- if memory_ram_size is defined %}
{%-   set app_ram_size = memory_ram_size | first %}
{%- else %}
{%-   set app_ram_size = sram_size %}
{%- endif %}

{%- if memory_flash_start is defined %}
{%-   set app_flash_start = memory_flash_start | first %}
{%- else %}
{%-   set app_flash_start = flash_addr %}
{#-
  Reserve space for the bootloader at the beginning of flash. Note that
  bootloader_size > 0 only for devices that place the bootloader in main flash.
  On devices where the bootloader is placed in the dedicated bootloader flash
  the bootloader_size value is 0.
#}
{%-   set app_bootloader_size = bootloader_size | sum %}
{%-   if app_bootloader_size > 0 %}
{%-     set app_flash_start = app_flash_start + app_bootloader_size %}
{%-   endif %}
{%- endif %}

{%- if memory_flash_size is defined %}
{%-   set app_flash_size = memory_flash_size | first %}
{%- else %}
{%-   set app_flash_size = flash_size %}

{%-   if app_bootloader_size > 0 %}
{%-     set app_flash_size = app_flash_size - app_bootloader_size %}
{%-   endif %}

{#-
  On series-2 devices we reserve the last flash page for tokens and key storage
#}
{%-   if (device_series | first) == 2 %}
{%-     set app_flash_size = app_flash_size - flash_page_size %}
{%-   endif %}
{%- endif %}

/*###ICF### Section handled by ICF editor, don't touch! ****/
/*-Editor annotation file-*/
/* IcfEditorFile="$TOOLKIT_DIR$\config\ide\IcfEditor\cortex_v1_0.xml" */
/* Version 4.1.1 */

{%- if iec60730_custom_linker_enable %}
/*-Specials-*/
define symbol __ICFEDIT_intvec_start__ = 0x{{ '%0x' % app_flash_start }};
{%- endif %}

/*-Memory Regions*/
{%- if bootloader_enable %}
  define symbol __ICFEDIT_region_ROM_start__ = 0x{{ '%0x' % bootloader_flash_startaddr }};
  {%- if (device_series | first) == 2 %}
  define symbol __ICFEDIT_region_ROM_end__   = (0x{{ '%0x' % bootloader_flash_startaddr }}+0x{{ '%0x' % bootloader_flash_size }}-0x40-0x{{ '%0x' % (app_rollback_protection_size | sum) }}-1);
  {%- else %}
  define symbol __ICFEDIT_region_ROM_end__   = (0x{{ '%0x' % bootloader_flash_startaddr }}+0x{{ '%0x' % bootloader_flash_size }}-0x4-0x{{ '%0x' % (app_rollback_protection_size | sum) }}-1);
  {%- endif %}
  define symbol __ICFEDIT_region_RAM_start__ = 0x{{ '%0x' % app_ram_start }};
  define symbol __ICFEDIT_region_RAM_end__   = (0x{{ '%0x' % app_ram_start }}+0x{{ '%0x' % app_ram_size }}-1);
{%- else %}
  define symbol __ICFEDIT_region_ROM_start__ = 0x{{ '%0x' % app_flash_start }};
  define symbol __ICFEDIT_region_ROM_end__   = (0x{{ '%0x' % app_flash_start }}+0x{{ '%0x' % app_flash_size }}-1);
  {%- if iec60730_custom_linker_enable %}
  define symbol __ICFEDIT_region_RAM_start__ = 0x{{ '%0x' % (app_ram_start + 0x80) }};
  define symbol __ICFEDIT_region_RAM_end__   = (0x{{ '%0x' % app_ram_start }}+0x{{ '%0x' % app_ram_size }}-1);
  define symbol __ICFEDIT_region_CLASSBRAM_start__   = 0x20000000;
  define symbol __ICFEDIT_region_CLASSBRAM_end__     = (0x20000000+0x00000080-1);
  {%-   else %}
  define symbol __ICFEDIT_region_RAM_start__ = 0x{{ '%0x' % app_ram_start }};
  define symbol __ICFEDIT_region_RAM_end__   = (0x{{ '%0x' % app_ram_start }}+0x{{ '%0x' % app_ram_size }}-1);
  {%- endif %}
{%- endif %}

{%- if iec60730_custom_linker_enable %}
/*-Sizes-*/
if ( !isdefinedsymbol( __ICFEDIT_size_cstack__ ) )
{ define symbol __ICFEDIT_size_cstack__   = 0x400; }
if ( !isdefinedsymbol( __ICFEDIT_size_heap__ ) )
{ define symbol __ICFEDIT_size_heap__     = 0x800; }
define exported symbol __FlashStart = __ICFEDIT_region_ROM_start__;
define exported symbol __StackTop = __ICFEDIT_region_RAM_end__;
define exported symbol __RamStart = __ICFEDIT_region_CLASSBRAM_start__;
define exported symbol __ClassBLimit = __ICFEDIT_region_CLASSBRAM_end__ + 1;
{%- endif %}

/**** End of ICF editor section. ###ICF###*/
define memory mem with size = 4G;
define region ROM_region   = mem:[from __ICFEDIT_region_ROM_start__   to __ICFEDIT_region_ROM_end__];
define region RAM_region   = mem:[from __ICFEDIT_region_RAM_start__   to __ICFEDIT_region_RAM_end__];
define region MAIN_FLASH_region   = mem:[from 0x{{ '%0x' % app_flash_start }}   to (0x{{ '%0x' % app_flash_start }}+0x{{ '%0x' % app_flash_size }}-1)];

{%- if iec60730_custom_linker_enable %}
define region CLASSBRAM_region   = mem:[from __ICFEDIT_region_CLASSBRAM_start__   to __ICFEDIT_region_CLASSBRAM_end__];
define block CSTACK    with alignment = 8, size = __ICFEDIT_size_cstack__   { };
define block HEAP      with alignment = 8, size = __ICFEDIT_size_heap__     { };
define block CHECKSUM  with alignment = 64 { section .checksum };

define root section classb_start { public __classb_start: };
define root section classb_end { public __classb_end: };
define block .user_classb with fixed order, alignment = 4,

                                size = (__ICFEDIT_region_CLASSBRAM_end__ - __ICFEDIT_region_CLASSBRAM_start__ + 1)

                            { section *.rt_buf,

                              section *.rt_buf*,

                              section *.overlap*,

                              section classb_start,

                              section *.classb_ram,

                              section *.classb_ram*,

                              section classb_end

                            };

keep { section *.overlap* };

define block .ram_no_clear     with alignment = 4 { section *.ram_no_clear* };
define block .ram_ret_no_clear with alignment = 4 { section *.ram_ret_no_clear* };
define block .ram_check        with alignment = 8 { section *.stack_bottom* };
define block .stack_order with fixed order { block .ram_check, block CSTACK, block HEAP };

do not initialize { section *.ram_no_clear* };
do not initialize { section *.ram_ret_no_clear* };
{%- endif %}

{%- if trustzone_secure %}
define symbol STACK_SEAL_SIZE = 8;
{%- endif %}

{%- if bootloader_enable %}
define block BOOTLOADER_RESET_REASON with size = 4, alignment = 4
{
  section .reset_reason
};
{%- endif %}

{%- if iec60730_custom_linker_enable == 0 %}
define block CSTACK with alignment = 8
{
  section .stack
};
{%- endif %}

{%-   if trustzone_secure %}
define block STACKSEAL with size = STACK_SEAL_SIZE
{
  section .stackseal
};
{%- endif %}

/* Note that "expanding size" is not used yet due to failures in 8.30.1 */
{%- if iec60730_custom_linker_enable == 0 %}
define block HEAP with alignment = 8
{
  section .heap
};
{%- endif %}

{%- if apploader_enable %}
define block apploader with alignment = {{ flash_page_size }}
{
  readonly section .binapploader
};
keep { section .binapploader };
{%- endif %}

{#-
  Exclude the NVM3 region for the TZ secure applications
#}
{% if trustzone_secure is not defined %}
{%- if linker_zwave_nvm is defined %}
define block zwavenvm with alignment = {{ flash_page_size }}
{
  section ZWAVENVM,
};

keep { block zwavenvm };
{%- endif %}

define block nvm with alignment = {{ flash_page_size }}
{
  section SIMEE,
};

keep { block nvm };
{%- endif %} {#- trustzone_secure #}
{%- if trustzone_secure %}
define block Veneer$$CMSE with alignment = {{ 32 }}
{
  section Veneer$$CMSE,
};
keep { block Veneer$$CMSE };
{%- endif %}

define block storage with alignment = {{ flash_page_size }}
{
  section INTERNAL_STORAGE,
};

keep { block storage };
{%- if bootloader_enable %}
define block ROM_CONTENT with fixed order { readonly, readonly section ROM_SIZE};
{%- else %}
define block application with fixed order
{
{%- if iec60730_custom_linker_enable == 0 %}
  readonly section .intvec,
  readonly
{%- endif %}
};

{%- if series >= 3 %}
{%- for component in code_classification_components %}
define block text_{{component}}_ram with alignment = 8
{
{%- for selection in code_classification_selections %}
{%- if selection['component'] == component  %}
  readwrite code section text_{{selection['component']}}_*{{selection['class']}}*,
{%- endif %}
{%- endfor %}
{%- if "timecritical" in code_classification_standard_selections %}
  readwrite code section text_{{component}}_*timecritical*,
{%- endif %}
};

define block text_{{component}}_ram_init with alignment = 8
{
{%- for selection in code_classification_selections %}
{%- if selection['component'] == component  %}
  readonly code section text_{{selection['component']}}_*{{selection['class']}}*_init,
{%- endif %}
{%- endfor %}
{%- if "timecritical" in code_classification_standard_selections %}
  readonly code section text_{{component}}_*timecritical*_init,
{%- endif %}
};

initialize by copy
{
{%- for selection in code_classification_selections %}
{%- if selection['component'] == component  %}
  readonly section text_{{selection['component']}}_*{{selection['class']}}*,
{%- endif %}
{%- endfor %}
{%- if "timecritical" in code_classification_standard_selections %}
  readonly section text_{{component}}_*timecritical*,
{%- endif %}
};
{%- endfor %}
{%- endif %}

define block text_application_ram with alignment = 8
{
  readwrite code section text_application_ram,
};

define block text_application_ram_init with alignment = 8
{
  readonly code section text_application_ram_init,
};

initialize by copy
{
  readonly section text_application_ram,
};
{%- endif %}

define block application_ram with fixed order
{
{%- if bootloader_enable %}
  block BOOTLOADER_RESET_REASON,
{%- endif %}
{%- if iec60730_custom_linker_enable == 0 %}
  block CSTACK,
{%- if trustzone_secure %}
  block STACKSEAL,
{%- endif %}
  readwrite,
  block HEAP
{%- endif %}
};

initialize by copy { readwrite };

do not initialize
{
{%- if bootloader_enable %}
  section .reset_reason,
{%- endif %}
 section .noinit,
 section .stack,
{%- if trustzone_secure %}
 section .stackseal,
{%- endif %}
 section .heap
};

keep { section .intvec };

{%- if iec60730_custom_linker_enable %}
place at address mem:__ICFEDIT_intvec_start__ { readonly section .intvec };

place in ROM_region   { readonly, last block CHECKSUM };
place in RAM_region   { readwrite,

                        block .ram_no_clear,

                        block .ram_ret_no_clear,

                        block .stack_order };
"CLASSB_RAM": place noload in CLASSBRAM_region   { block .user_classb };
{%-   endif %}

{%- if bootloader_enable %}
place in ROM_region
{
  block ROM_CONTENT
};
{%- else %}
{%- if apploader_enable %}
".text_apploader":
place at start of ROM_region  { block apploader };
"application":
place in ROM_region
{
  block application,
{%- if series >= 3 %}
{%- for component in code_classification_components %}
  block text_{{component}}_ram_init,
{%- endfor %}
{%- endif %}
  block text_application_ram_init,
};
{%- else %}
"application":
place at start of ROM_region
{
  block application,
{%- if series >= 3 %}
{%- for component in code_classification_components %}
  block text_{{component}}_ram_init,
{%- endfor %}
{%- endif %}
  block text_application_ram_init,
};
{%- endif %}
{%- endif %}

"storage_regions":
place at end of MAIN_FLASH_region {
  block storage,
{% if trustzone_secure is not defined %}
{%- if linker_zwave_nvm is defined %}
  block zwavenvm,
{%- endif %}
  block nvm,
{%- endif %} {#- trustzone_secure #}
{%- if trustzone_secure %}
  block Veneer$$CMSE
{%- endif %}
};

{%- if not bootloader_enable %}
"ram_code":
place at start of RAM_region {
{%- if series >= 3 %}
{%- for component in code_classification_components %}
  block text_{{component}}_ram,
{%- endfor %}
{%- endif %}
  block text_application_ram,
};
{%- endif %}

"application_ram":
place in RAM_region {
  block application_ram,
};
